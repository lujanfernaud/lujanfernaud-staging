'use strict';

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var ImageHoverToggler = (function () {
  function ImageHoverToggler() {
    _classCallCheck(this, ImageHoverToggler);

    this.delayedToggler = new DelayedClassToggler();
    this.projectImageContainer = '.project__image-container';
    this.imageHoverActive = 'project__image-container--hover';
    this.miliseconds = 200;
  }

  _createClass(ImageHoverToggler, [{
    key: 'watch',
    value: function watch() {
      var _this = this;

      inView(this.projectImageContainer).on('enter', function (element) {
        _this._toggleHoverActive(element);
      });

      inView(this.projectImageContainer).on('exit', function (element) {
        _this._toggleHoverActive(element);
      });
    }

    // private

  }, {
    key: '_toggleHoverActive',
    value: function _toggleHoverActive(element) {
      this.delayedToggler.toggle({
        element: element,
        klass: this.imageHoverActive,
        miliseconds: this.miliseconds
      });
    }
  }]);

  return ImageHoverToggler;
})();